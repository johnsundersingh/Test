//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DioWeb.DioTransfer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://transfer.diomedestorage.com", ConfigurationName="DioTransfer.IDiomedeStorageTransfer", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IDiomedeStorageTransfer {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadWithCreateFileRequest) of message UploadWithCreateFileRequest does not match the default value (UploadWithCreateFile)
        [System.ServiceModel.OperationContractAttribute(Action="UploadWithCreateFile", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/UploadWithCreateFileRe" +
            "sponse")]
        DioWeb.DioTransfer.UploadWithCreateFileResponse UploadWithCreateFile(DioWeb.DioTransfer.UploadWithCreateFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="UploadWithCreateFile", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/UploadWithCreateFileRe" +
            "sponse")]
        System.IAsyncResult BeginUploadWithCreateFile(DioWeb.DioTransfer.UploadWithCreateFileRequest request, System.AsyncCallback callback, object asyncState);
        
        DioWeb.DioTransfer.UploadWithCreateFileResponse EndUploadWithCreateFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (CreateFileRequest) of message CreateFileRequest does not match the default value (CreateFile)
        [System.ServiceModel.OperationContractAttribute(Action="CreateFile", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/CreateFileResponse")]
        DioWeb.DioTransfer.CreateFileResponse CreateFile(DioWeb.DioTransfer.CreateFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="CreateFile", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/CreateFileResponse")]
        System.IAsyncResult BeginCreateFile(DioWeb.DioTransfer.CreateFileRequest request, System.AsyncCallback callback, object asyncState);
        
        DioWeb.DioTransfer.CreateFileResponse EndCreateFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the operation Upload is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="Upload", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/UploadResponse")]
        DioWeb.DioTransfer.UploadResponse Upload(DioWeb.DioTransfer.UploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Upload", ReplyAction="http://transfer.diomedestorage.com/IDiomedeStorageTransfer/UploadResponse")]
        System.IAsyncResult BeginUpload(DioWeb.DioTransfer.UploadRequest request, System.AsyncCallback callback, object asyncState);
        
        DioWeb.DioTransfer.UploadResponse EndUpload(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadWithCreateFileRequest", WrapperNamespace="http://transfer.diomedestorage.com", IsWrapped=true)]
    public partial class UploadWithCreateFileRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://transfer.diomedestorage.com")]
        public string sessionToken;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://transfer.diomedestorage.com")]
        public darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=0)]
        public System.IO.Stream content;
        
        public UploadWithCreateFileRequest() {
        }
        
        public UploadWithCreateFileRequest(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo, System.IO.Stream content) {
            this.sessionToken = sessionToken;
            this.uploadWithCreateFileInfo = uploadWithCreateFileInfo;
            this.content = content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadWithCreateFileResponse", WrapperNamespace="http://transfer.diomedestorage.com", IsWrapped=true)]
    public partial class UploadWithCreateFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=0)]
        public long fileID;
        
        public UploadWithCreateFileResponse() {
        }
        
        public UploadWithCreateFileResponse(long fileID) {
            this.fileID = fileID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFileRequest", WrapperNamespace="http://transfer.diomedestorage.com", IsWrapped=true)]
    public partial class CreateFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=0)]
        public string sessionToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=1)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=2)]
        public string callbackAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=3)]
        public string hash;
        
        public CreateFileRequest() {
        }
        
        public CreateFileRequest(string sessionToken, string fileName, string callbackAddress, string hash) {
            this.sessionToken = sessionToken;
            this.fileName = fileName;
            this.callbackAddress = callbackAddress;
            this.hash = hash;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFileResponse", WrapperNamespace="http://transfer.diomedestorage.com", IsWrapped=true)]
    public partial class CreateFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=0)]
        public long fileID;
        
        public CreateFileResponse() {
        }
        
        public CreateFileResponse(long fileID) {
            this.fileID = fileID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://transfer.diomedestorage.com", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://transfer.diomedestorage.com")]
        public string sessionToken;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://transfer.diomedestorage.com")]
        public darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://transfer.diomedestorage.com", Order=0)]
        public System.IO.Stream content;
        
        public UploadRequest() {
        }
        
        public UploadRequest(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo, System.IO.Stream content) {
            this.sessionToken = sessionToken;
            this.uploadInfo = uploadInfo;
            this.content = content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadResponse {
        
        public UploadResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDiomedeStorageTransferChannel : DioWeb.DioTransfer.IDiomedeStorageTransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UploadWithCreateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadWithCreateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DiomedeStorageTransferClient : System.ServiceModel.ClientBase<DioWeb.DioTransfer.IDiomedeStorageTransfer>, DioWeb.DioTransfer.IDiomedeStorageTransfer {
        
        private BeginOperationDelegate onBeginUploadWithCreateFileDelegate;
        
        private EndOperationDelegate onEndUploadWithCreateFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadWithCreateFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFileDelegate;
        
        private EndOperationDelegate onEndCreateFileDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadDelegate;
        
        private EndOperationDelegate onEndUploadDelegate;
        
        private System.Threading.SendOrPostCallback onUploadCompletedDelegate;
        
        public DiomedeStorageTransferClient() {
        }
        
        public DiomedeStorageTransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiomedeStorageTransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiomedeStorageTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiomedeStorageTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<UploadWithCreateFileCompletedEventArgs> UploadWithCreateFileCompleted;
        
        public event System.EventHandler<CreateFileCompletedEventArgs> CreateFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.UploadWithCreateFileResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.UploadWithCreateFile(DioWeb.DioTransfer.UploadWithCreateFileRequest request) {
            return base.Channel.UploadWithCreateFile(request);
        }
        
        public long UploadWithCreateFile(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo, System.IO.Stream content) {
            DioWeb.DioTransfer.UploadWithCreateFileRequest inValue = new DioWeb.DioTransfer.UploadWithCreateFileRequest();
            inValue.sessionToken = sessionToken;
            inValue.uploadWithCreateFileInfo = uploadWithCreateFileInfo;
            inValue.content = content;
            DioWeb.DioTransfer.UploadWithCreateFileResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).UploadWithCreateFile(inValue);
            return retVal.fileID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DioWeb.DioTransfer.IDiomedeStorageTransfer.BeginUploadWithCreateFile(DioWeb.DioTransfer.UploadWithCreateFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadWithCreateFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadWithCreateFile(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo, System.IO.Stream content, System.AsyncCallback callback, object asyncState) {
            DioWeb.DioTransfer.UploadWithCreateFileRequest inValue = new DioWeb.DioTransfer.UploadWithCreateFileRequest();
            inValue.sessionToken = sessionToken;
            inValue.uploadWithCreateFileInfo = uploadWithCreateFileInfo;
            inValue.content = content;
            return ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).BeginUploadWithCreateFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.UploadWithCreateFileResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.EndUploadWithCreateFile(System.IAsyncResult result) {
            return base.Channel.EndUploadWithCreateFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndUploadWithCreateFile(System.IAsyncResult result) {
            DioWeb.DioTransfer.UploadWithCreateFileResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).EndUploadWithCreateFile(result);
            return retVal.fileID;
        }
        
        private System.IAsyncResult OnBeginUploadWithCreateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo = ((darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo)(inValues[1]));
            System.IO.Stream content = ((System.IO.Stream)(inValues[2]));
            return this.BeginUploadWithCreateFile(sessionToken, uploadWithCreateFileInfo, content, callback, asyncState);
        }
        
        private object[] OnEndUploadWithCreateFile(System.IAsyncResult result) {
            long retVal = this.EndUploadWithCreateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadWithCreateFileCompleted(object state) {
            if ((this.UploadWithCreateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadWithCreateFileCompleted(this, new UploadWithCreateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadWithCreateFileAsync(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo, System.IO.Stream content) {
            this.UploadWithCreateFileAsync(sessionToken, uploadWithCreateFileInfo, content, null);
        }
        
        public void UploadWithCreateFileAsync(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadWithCreateFileInfo uploadWithCreateFileInfo, System.IO.Stream content, object userState) {
            if ((this.onBeginUploadWithCreateFileDelegate == null)) {
                this.onBeginUploadWithCreateFileDelegate = new BeginOperationDelegate(this.OnBeginUploadWithCreateFile);
            }
            if ((this.onEndUploadWithCreateFileDelegate == null)) {
                this.onEndUploadWithCreateFileDelegate = new EndOperationDelegate(this.OnEndUploadWithCreateFile);
            }
            if ((this.onUploadWithCreateFileCompletedDelegate == null)) {
                this.onUploadWithCreateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadWithCreateFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadWithCreateFileDelegate, new object[] {
                        sessionToken,
                        uploadWithCreateFileInfo,
                        content}, this.onEndUploadWithCreateFileDelegate, this.onUploadWithCreateFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.CreateFileResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.CreateFile(DioWeb.DioTransfer.CreateFileRequest request) {
            return base.Channel.CreateFile(request);
        }
        
        public long CreateFile(string sessionToken, string fileName, string callbackAddress, string hash) {
            DioWeb.DioTransfer.CreateFileRequest inValue = new DioWeb.DioTransfer.CreateFileRequest();
            inValue.sessionToken = sessionToken;
            inValue.fileName = fileName;
            inValue.callbackAddress = callbackAddress;
            inValue.hash = hash;
            DioWeb.DioTransfer.CreateFileResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).CreateFile(inValue);
            return retVal.fileID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DioWeb.DioTransfer.IDiomedeStorageTransfer.BeginCreateFile(DioWeb.DioTransfer.CreateFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateFile(string sessionToken, string fileName, string callbackAddress, string hash, System.AsyncCallback callback, object asyncState) {
            DioWeb.DioTransfer.CreateFileRequest inValue = new DioWeb.DioTransfer.CreateFileRequest();
            inValue.sessionToken = sessionToken;
            inValue.fileName = fileName;
            inValue.callbackAddress = callbackAddress;
            inValue.hash = hash;
            return ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).BeginCreateFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.CreateFileResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.EndCreateFile(System.IAsyncResult result) {
            return base.Channel.EndCreateFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndCreateFile(System.IAsyncResult result) {
            DioWeb.DioTransfer.CreateFileResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).EndCreateFile(result);
            return retVal.fileID;
        }
        
        private System.IAsyncResult OnBeginCreateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            string callbackAddress = ((string)(inValues[2]));
            string hash = ((string)(inValues[3]));
            return this.BeginCreateFile(sessionToken, fileName, callbackAddress, hash, callback, asyncState);
        }
        
        private object[] OnEndCreateFile(System.IAsyncResult result) {
            long retVal = this.EndCreateFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFileCompleted(object state) {
            if ((this.CreateFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFileCompleted(this, new CreateFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFileAsync(string sessionToken, string fileName, string callbackAddress, string hash) {
            this.CreateFileAsync(sessionToken, fileName, callbackAddress, hash, null);
        }
        
        public void CreateFileAsync(string sessionToken, string fileName, string callbackAddress, string hash, object userState) {
            if ((this.onBeginCreateFileDelegate == null)) {
                this.onBeginCreateFileDelegate = new BeginOperationDelegate(this.OnBeginCreateFile);
            }
            if ((this.onEndCreateFileDelegate == null)) {
                this.onEndCreateFileDelegate = new EndOperationDelegate(this.OnEndCreateFile);
            }
            if ((this.onCreateFileCompletedDelegate == null)) {
                this.onCreateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFileCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFileDelegate, new object[] {
                        sessionToken,
                        fileName,
                        callbackAddress,
                        hash}, this.onEndCreateFileDelegate, this.onCreateFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.UploadResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.Upload(DioWeb.DioTransfer.UploadRequest request) {
            return base.Channel.Upload(request);
        }
        
        public void Upload(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo, System.IO.Stream content) {
            DioWeb.DioTransfer.UploadRequest inValue = new DioWeb.DioTransfer.UploadRequest();
            inValue.sessionToken = sessionToken;
            inValue.uploadInfo = uploadInfo;
            inValue.content = content;
            DioWeb.DioTransfer.UploadResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).Upload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DioWeb.DioTransfer.IDiomedeStorageTransfer.BeginUpload(DioWeb.DioTransfer.UploadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpload(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpload(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo, System.IO.Stream content, System.AsyncCallback callback, object asyncState) {
            DioWeb.DioTransfer.UploadRequest inValue = new DioWeb.DioTransfer.UploadRequest();
            inValue.sessionToken = sessionToken;
            inValue.uploadInfo = uploadInfo;
            inValue.content = content;
            return ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).BeginUpload(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DioWeb.DioTransfer.UploadResponse DioWeb.DioTransfer.IDiomedeStorageTransfer.EndUpload(System.IAsyncResult result) {
            return base.Channel.EndUpload(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpload(System.IAsyncResult result) {
            DioWeb.DioTransfer.UploadResponse retVal = ((DioWeb.DioTransfer.IDiomedeStorageTransfer)(this)).EndUpload(result);
        }
        
        private System.IAsyncResult OnBeginUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionToken = ((string)(inValues[0]));
            darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo = ((darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo)(inValues[1]));
            System.IO.Stream content = ((System.IO.Stream)(inValues[2]));
            return this.BeginUpload(sessionToken, uploadInfo, content, callback, asyncState);
        }
        
        private object[] OnEndUpload(System.IAsyncResult result) {
            this.EndUpload(result);
            return null;
        }
        
        private void OnUploadCompleted(object state) {
            if ((this.UploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadAsync(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo, System.IO.Stream content) {
            this.UploadAsync(sessionToken, uploadInfo, content, null);
        }
        
        public void UploadAsync(string sessionToken, darrenjohnstone.net.FileUpload.DioTransfer.UploadInfo uploadInfo, System.IO.Stream content, object userState) {
            if ((this.onBeginUploadDelegate == null)) {
                this.onBeginUploadDelegate = new BeginOperationDelegate(this.OnBeginUpload);
            }
            if ((this.onEndUploadDelegate == null)) {
                this.onEndUploadDelegate = new EndOperationDelegate(this.OnEndUpload);
            }
            if ((this.onUploadCompletedDelegate == null)) {
                this.onUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadCompleted);
            }
            base.InvokeAsync(this.onBeginUploadDelegate, new object[] {
                        sessionToken,
                        uploadInfo,
                        content}, this.onEndUploadDelegate, this.onUploadCompletedDelegate, userState);
        }
    }
}
